# Sample of Communicator Daemon configuration file
#
# The file is a basic list of "variable_name = value"
#
# Comments start with a # character, must be the first character after spaces
# Empty lines are ignored
#
# Instead of editing this file, please consider creating a file named:
#
#     /etc/communicatord/communicatord.d/50-communicatord.conf
#
# Other projects may add files with a different number (10, 90, etc.)


# server_name=<name>
#
# Name of this server, each server MUST have a different name to make
# sure that each can generate unique identifiers without relying on
# UUIDs or some such features.
#
# If not defined in the .conf file, the computer `hostname` is used
# (see hostname(1) or gethostname(2) manuals for more info.) In most
# cases, this is enough. It can be problematic if your name starts
# with a digit or includes Snap! Websites incompatible characters.
#
# The hostname dash (-) characters and transformed to underscores (_)
# and only the part before the first period (.) is kept. In most cases,
# the hostname will be valid, although you could end up with duplicates
# if the first part of the name (FNDQ) is the same on multiple computers.
#
# The name is considered case insensitive. Internally, we actually convert
# it to all lowercase letters. Note that only A-Z and a-z letters are
# supported. UTF-8 is not accepted.
#
# Default: <none>
#server_name=my_server_name


# debug_all_messages=on
#
# Debug all messages going through the communicator daemon when this
# variable is set.
#
# Watch out when using this option. This is really only for debug to see
# all the messages going back and forth and debugging your protocol.
# It can get slow if you run many services simultaneously on a complete
# live system.
#
# To get even more logs, use the --debug or --trace on the command line
# in a Debug version of the communicator daemon.
#
# Default: <undefined>
#debug_all_messages=on


# my_address=<IP address>
#
# The IP address of your network, most generally a private IP.
# This IP address is shared and will generally be the same as
# the one found in the listen=... parameter, but without the
# port.
#
# IMPORTANT NOTE:
# By default we set this parameter to 127.0.0.1, which is similar to
# saying "ignore the address for remote connections." This allows the
# environment to automatically start which in turn gives you the
# ability to tweak parameters from snapmanager.cgi. However, the local
# IP address is not correct in this parameter.
#
# Default: 127.0.0.1 -- to match the listen=... value and prevent remote connections by default
my_address=127.0.0.1


# remote_listen=<private IP address:port>
#
# IP and port to listen on for TCP/IP connections for other communicator
# daemons running on your private network (i.e. 10.0.0.0, 192.168.0.0...)
#
# IMPORTANT NOTE:
# See the IMPORTANT NOTE for the "my_address" field. We use 127.0.0.1
# so we can start communicatord without you having to immediately
# edit anything. However, the local IP address will prevent remote
# communicatords from connecting between each others.
#
# Default: 127.0.0.1:4040 -- to match the my_address=... and prevent remote connections
remote_listen=127.0.0.1:4040


# secure_listen=<private IP address:port>
#
# IP and port to listen on for TCP/IP connections for other communicator
# daemons running anywhere. Since most users have access to a private network,
# this option is turned off by default. It can, however, be very practical
# to connect between remote clusters over a public connection. In most cases,
# only on communicatord in each cluster is given public access. All
# communications between the two clusters will go through that one connection.
# This can be a bottleneck but ease your security setup.
#
# IMPORTANT NOTE:
# The secure listener is created only if a `certificate=...` and
# `private_key=...` are defined.
#
# Default: <none>
#secure_listen=127.0.0.1:4040


# local_listen=<local IP address>:<port>
#
# IP and port to listen on for local TCP/IP connections.
#
# The address MUST be a local IP address (such as 127.0.0.1). This is for
# security reasons because daemons that connect to that address are
# considered safe (since they run on the same computer.)
#
# Default: 127.0.0.1:4040
local_listen=127.0.0.1:4040


# unix_listen=<path to unix socket>
#
# A path to a Unix socket file which is to be used for an AF_UNIX socket.
# This type of connection is used by all the local services running along
# the communicatord.
#
# If you are a client, don't forget you need to also include the URL scheme
# such as "cd://" before the path. You do not want it here, though.
#
# Default: /run/communicatord/communicatord.sock
unix_listen=/run/communicatord/communicatord.sock


# signal=<IP address>:<port>
#
# IP and port to listen on for UDP/IP packets. A limited number of messages
# can be sent to communicatord over this UDP port. For example, a child
# process will often send an event to that IP:port when it makes a
# modification to the data that requires a backend to process the change.
# (i.e. a PING is sent when a new image is uploaded and a script attached
# to it.)
#
# Default: 127.0.0.1:4041
signal=127.0.0.1:4041


# signal_secret=<secret-code>
#
# A secret code used to communicate with the communicatord UDP port.
#
# UDP has no good control in regard to who emitted the source message so
# we use a secret code allowing your network to safely use UDP between
# computers. The code is expected to be small. It can include any
# characters although it doesn't need to be that complex, just not a
# dictionary word or "password1", please.
#
# When you define a secret code, a UDP message we receive without this
# secret code is simply discarded.
#
# When this parameter is set to empty, communicatord accepts all UDP
# messages on the signal channel. This is a safe setup only if the
# signal IP address is 127.x.x.x.
#
# Default: <undefined>
#signal_secret=


# max_connections=<integer between 5 and 1000>
#
# Maximum number of simultaneous remote connections the communicatord
# accepts. Once this limit is reached, additional connection attempts
# are refused.
#
# This is only for connections between communicator daemons.
#
# Default: 100
#max_connections=<default>


# max_pending_connections=<integer between 5 and 1000>
#
# Number of connections that we can receive simultaneously before the OS
# rejects them. The specified value is clamped between 5 and 1000 inclusive.
# To get the default, comment our the variable.
#
# Default: 25
#max_pending_connections=<default>


# certificate=<full path to PEM file>
#
# If a certificate (and private key) is defined, then the communicatord
# remote connections will be done over SSL. Note that SSL really means
# it will be encrypted. At time of writing, we only allow TLS v1.2
# connections and no SSL v2 or v3.
#
# Default: /etc/communicatord/keys/communicatord.crt
certificate=/etc/communicatord/keys/communicatord.crt


# private_key=<full path to PEM file>
#
# If a private key (and certificate) is defined, then the communicatord
# remote connections will be done over an encrypted connection.
#
# Default: /etc/communicatord/keys/communicatord.key
private_key=/etc/communicatord/keys/communicatord.key


# neighbors=IP:port,IP:port,...
#
# The IP and port of communicatord services running on other computers.
# Multiple IP:port definitions are separated by commas.
#
# If not specified, this communicatord will not try to connect to a
# remote communicatord unless it receives a list of neighbors from
# another communicatord which connects to it.
#
# There is no default address, the port is 4040 by default if not specified.
#
# Example: 10.0.0.5:4040,10.0.0.13:4040
#neighbors=10.0.0.5


# data_path=<path to read/write data files>
#
# This variable is expected to be set to a full directory path accessible
# by communicatord in read and write mode.
#
# At the moment it is used to save the list of neighbors that the
# communicatord manages.
#
# Default: /var/lib/communicatord
data_path=/var/lib/communicatord


# services=<path to services directory>
#
# The path to a directory that holds .service files representing all
# the communicator daemon services installed on this machine.
#
# Default: /usr/share/communicatord/services
services=/usr/share/communicatord/services


# vim: wrap
